The IBehavior interface represents a kind of behavior, such as Solid, Physics or
Pin. Some behaviors derive from this class to add extra options that are global to the
entire behavior, such as the physics world properties in the Physics behavior. This
interface is usually accessed through the IBehaviorInstance behavior property.
getAllInstances()
Return an array of all instances that have this kind of behavior, for example every
object with the Solid behavior. Note the returned instances may come from a range
of different object types.
Revision 328 Page 825/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/ibehaviorinstance
The IBehaviorInstance interface represents a behavior on an IInstance.
Many behaviors return a more specific class deriving from IBehaviorInstance to add
APIs specific to the behavior. See the Behavior instances reference for more
information.
Behavior instances are typically accessed via the behaviors property of IInstance,
followed by the name of the behavior. Some example code is shown below.
const mySpriteInst = runtime.objects.Sprite.getFirstInstance();
const myBehaviorInst = mySpriteInst.behaviors.Platform;
// ... do something with myBehaviorInst ...
addEventListener(type, func, capture)
removeEventListener(type, func, capture)
Add or remove an event handler for a particular type of event fired by an addon's
script interface. An event object is passed as a parameter to the handler function. See behavior instance event for standard event object properties. For information on
which events are fired by specific addons and which additional event object
properties are available, see the documentation on each addon's script interfaces.
dispatchEvent(e)
Dispatch an event, firing any handler functions that have been added for the event
type. You can use new C3.Event(eventName, isCancellable) to create
an event object that can be dispatched (e.g. new C3.Event("arrived",
true) ), and add any extra properties relevant to your event to that object. This can
also be used by the addon SDK to cause your addon to fire an event in the script
interface, e.g.:
const e = new C3.Event("arrived", true);
this.GetScriptInterface().dispatchEvent(e);
Revision 328 Page 826/1582
instance
A reference to the IInstance representing the object instance this behavior instance
is affecting.
behavior
A reference to the IBehavior representing the kind of behavior, e.g. Solid or Physics.
runtime
A reference back to the IRuntime interface.
Revision 328 Page 827/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/idominstance
The IDOMInstance script interface represents a single instance of an object type
(represented by IObjectClass) that appears in a layout and represents a DOM element
such as a button or other form control at runtime. It derives from the IWorldInstance
script interface.
Note these methods can still be used in worker mode, since it does not directly access
a DOM element.
focus()
blur()
Focus or blur the DOM element represented by this instance.
setCssStyle(prop, val)
Apply a CSS style to the DOM element, using a string of the property name (in CSS
format, e.g. "background-color" and a string of the property value (e.g.
"red" ).
getElement()
Return the HTML element used to represent the object.
Since the DOM APIs are not available in worker mode, this will throw an
exception when running in a Web Worker.
Revision 328 Page 828/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/ieffectinstance
The IEffectInstance script interface represents the parameters for a single
effect on a IWorldInstance, ILayer or ILayout. It is typically accessed through the
effects property.
See the Scripting effect parameters example for a demonstration of using the
setParameter() method to modify effect parameters.
index
The zero-based index of this effect, which is its index in the effects array.
name
A read-only string of the effect name.
isActive
A boolean indicating whether this effect is enabled or not. Inactive effects act the
same as the effect being deleted, but the effect can later be reactivated if it is
needed again. Note making effects inactive if they are not needed improves
performance.
setParameter(index, value)
getParameter(index)
Set or get an effect parameter by the zero-based parameter index. Most parameters
use a number as the value. Note however that color parameters are represented by
an array with three elements, i.e. [r, g, b] . The R, G and B values are
normalized to floats in the [0, 1] range.
Revision 328 Page 829/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/iimageinfo
The IImageInfo interface represents an image in the project. It is also the base
class of IAnimationFrame.
width
height
getSize()
Read-only numbers specifying the dimensions of the image in pixels. The method
returns both values at the same time.
Revision 328 Page 830/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/iinstance
The IInstance script interface represents a single instance of an object type
(represented by IObjectClass). Instances that appear in the layout have a
IWorldInstance interface instead, but it derives from IInstance , so these methods
and properties are available for any type of instance.
Many objects return a more specific class deriving from IInstance or
IWorldInstance to add APIs specific to the plugin. See the Plugin interfaces
reference for more information.
Instances are typically accessed through IObjectClass methods like
getFirstInstance() . For example,
runtime.objects.Sprite.getFirstInstance() will return the first instance
of the Sprite object type.
The following events can be listened for on any instance using the
addEventListener method. See instance event for standard event properties. Note many more kinds of addon-specific events can be fired. See the documentation
on each addon's script interfaces for more information.
"destroy"
Fired when the instance is destroyed. After this event, all references to the instance
are now invalid, so any remaining references to the instance should be removed or
cleared to null in this event. Accessing an instance after it is destroyed will throw
exceptions or return invalid data. The event object also has an isEndingLayout
property to indicate if the object is being destroyed because it's the end of a layout,
or destroyed for other reasons.
addEventListener(type, func, capture)
removeEventListener(type, func, capture)
Add or remove an event handler for a particular type of event fired by an addon's
script interface. An event object is passed as a parameter to the handler function.
Revision 328 Page 831/1582
See instance event for standard event object properties. For information on which
events are fired by specific addons and which additional event object properties are
available, see the documentation on each addon's script interfaces.
dispatchEvent(e)
Dispatch an event, firing any handler functions that have been added for the event
type. You can use new C3.Event(eventName, isCancellable) to create
an event object that can be dispatched (e.g. new C3.Event("click",
true) ), and add any extra properties relevant to your event to that object. This can
also be used by the addon SDK to cause your addon to fire an event in the script
interface, e.g.:
const e = new C3.Event("click", true);
this.GetScriptInterface().dispatchEvent(e);
runtime
A reference back to the IRuntime interface. (This is particularly useful when
subclassing instances, since in a custom class's methods you can always refer to
the runtime with this.runtime .)
objectType
The IObjectClass interface for this instance's object type.
This is named objectType and not objectClass because it always refers to an
object type, and never a family.
instVars
If the object has any instance variables, they can be accessed by named properties
under this property. For example if an object has an instance variable named health,
it can be set and retrieved using instance.instVars.health . Note if the
object has no instance variables, the instance won't have an instVars property
at all.
In some cases, instance variables may have names that aren't valid
JavaScript identifiers. In this case you can use the string property syntax, e.g.
instance.instVars["health"] .
You don't have to use instance variables to add custom properties to
instances. In JavaScript you can simply assign new properties to existing
objects, or use instance subclassing to use your own custom class with your
Revision 328 Page 832/1582
own properties and methods.
behaviors
If the object has any behaviors, they can be accessed by named properties under
this property. For example if an object has a behavior named Bullet, it can be
accessed using instance.behaviors.Bullet . Each behavior has its own
properties and methods, which can be found in the Behavior interfaces reference
section. Note if the object has no behaviors, the instance won't have a
behaviors property at all.
In some cases, behaviors may have names that aren't valid JavaScript
identifiers. In this case you can use the string property syntax, e.g.
instance.behaviors["8Direction"] .
uid
The unique ID of this instance, as a number. Note instances can be looked up by
their UID using the runtime getInstanceByUid() method.
templateName
Read-only string of the name of the template used to create this instance, or an
empty string if no template was used.
destroy()
Destroy the instance, removing it and releasing any memory associated with it.
Do not make any further calls or access any properties after the
destroy() call. The instance is no longer valid and any attempts to use it
may throw exceptions.
getOtherContainerInstances()
Return an array of IInstance (or derivatives) representing other instances in the
same container as this instance. This excludes the instance the method is called on.
*otherContainerInstances()
Iterates over IInstance (or derivatives) representing other instances in the
same container as this instance. This excludes the instance the method is called on.
timeScale
restoreTimeScale()
The timeScale property sets or gets the current instance-specific time scale,
e.g. 1.0 for normal speed, 2.0 for twice as fast, etc. Note that once set, the instance
uses its own time scale instead of runtime time scale, e.g. allowing an instance to
keep moving when the runtime time scale is 0. Calling the
Revision 328 Page 833/1582
restoreTimeScale() method will then switch it back to following the runtime
time scale.
Revision 328 Page 834/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/iobjectclass
The IObjectClass script interface represents an object class in the project, e.g. a
Sprite object type. An ObjectClass can have multiple instances created, which are
represented by the IWorldInstance script interface if it appears in a layout, otherwise
the IInstance interface.
The term object class is used to refer to both object types and families. It can be
thought of as the base class of both.
References to the project's object classes are typically accessed through the IRuntime
interface objects property. For example runtime.objects.Sprite would
refer to the IObjectclass interface for the Sprite object type, assuming one was
added to the project.
Try not to confuse object classes with object instances. A common mistake is to
try to use something like runtime.objects.Sprite.x to get the X coordinate of a Sprite instance. However runtime.objects.Sprite is an
IObjectClass, which does not have a position. First add another call to get an
instance before trying to read instance properties, for example
runtime.objects.Sprite.getFirstInstance().x .
The following examples demonstrate using some features of IObjectClass :
Instance destroy event demonstrates the use of the "instancedestroy" event
Iterating instances demonstrates the use of the instances() iterator to modify
all instances
The following events can be listened for using the addEventListener method.
"instancecreate"
Revision 328 Page 835/1582
Fired whenever a new instance belonging to this object type (or family) is created.
The event object has an instance property referring to the IInstance (or
derivative) that was created.
"instancedestroy"
Fired whenever any instance belonging to this object type (or family) is destroyed. After this event, all references to the instance are now invalid, so any remaining
references to the instance should be removed or cleared to null in this event.
Accessing an instance after it is destroyed will throw exceptions or return invalid
data. The event object has an instance property referring to the IInstance (or
derivative) that was destroyed. It also has an isEndingLayout property to
indicate if the object is being destroyed because it's the end of a layout, or destroyed
for other reasons.
name
A read-only string of the object class's name.
addEventListener(eventName, callback)
removeEventListener(eventName, callback)
Add or remove a callback function for an event. See Object class events above for
more information.
setInstanceClass(Class)
Set a custom class to be used to represent instances of this object type. The class
must derive from the default class. This can only be called in runOnStartup ,
before any instances have been created. For more information see the guide on
subclassing instances.
getAllInstances()
Return an array of all instances of this object class.
getFirstInstance()
Return the first instance in the array returned by getAllInstances() , or
null if no instances exist.
*instances()
Iterates over all the object class's instances.
getPickedInstances()
Return an array of instances that have been picked by the event's conditions. This is
only useful with scripts in event sheets.
Revision 328 Page 836/1582
getFirstPickedInstance()
Return the first instance that has been picked by the event's conditions, or null if
none. This is only useful with scripts in event sheets.
*pickedInstances()
Iterates over the instances that have been picked by the event's conditions. This is
only useful with scripts in event sheets.
createInstance(layerNameOrIndex, x, y, createHierarchy, template)
Create a new instance of the object type at a position. The layer to create on is
specified either by a case-insensitive string of the layer name or its zero-based
index. The position is given in layout co-ordinates. If createHierarchy is true,
all children of the created instance in the scene-graph hierarchy will also be created
automatically with their connections in place. If template is a valid template
name then the new instance will be based on the template rather than an arbitrary
instance. Returns an instance class representing the created instance.
See Setting up a hierarchy in the Layout View manual entry for more
information about hierarchies.
See the Templates manual entry for more information on what templates are
and how to start using them.
Revision 328 Page 837/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/object-interfaces/iworldinstance
The IWorldInstance script interface represents a single instance of an object
type (represented by IObjectClass) that appears in a layout. It derives from the
IInstance script interface.
Many objects return a more specific class deriving from IInstance or
IWorldInstance to add APIs specific to the plugin. See the Plugin interfaces
reference for more information.
Instances are typically accessed through IObjectClass methods like
getFirstInstance() . For example,
runtime.objects.Sprite.getFirstInstance() will return the first instance
of the Sprite object type.
Try not to confuse object classes with object instances. A common mistake is to
try to use something like runtime.objects.Sprite.x to get the X coordinate of a Sprite instance. However runtime.objects.Sprite is an
IObjectClass, which does not have a position. First add another call to get an
instance before trying to read instance properties, for example
runtime.objects.Sprite.getFirstInstance().x .
layout
An ILayout interface representing the layout the instance is on.
layer
An ILayer interface representing the layer the instance is on.
x
y
setPosition(x, y)
getPosition()
The position of this instance, in layout co-ordinates. The methods allow setting or
getting both co-ordinates at the same time.
Revision 328 Page 838/1582
offsetPosition(dx, dy)
Adjust the position by adding dx to the X co-ordinate and dy to the Y coordinate.
zElevation
The Z elevation of the instance, relative to the layer it is on.
totalZElevation
A read-only value indicating the Z elevation of the instance including its layer's Z
elevation.
width
height
setSize(width, height)
getSize()
The size of this instance, in layout co-ordinates. The methods allow setting or getting
both values at the same time.
angle
The angle of the instance in radians. If this is changed, angleDegrees updates
accordingly.
angleDegrees
The angle of the instance in degrees. If this is changed, angle updates
accordingly.
getBoundingBox()
Return a DOMRect representing the axis-aligned bounding box of the instance in
layout co-ordinates.
This returns a copy of the bounding box. The returned DOMRect does not
change if the instance changes, nor does changing the DOMRect affect the
instance.
getBoundingQuad()
Return a DOMQuad representing the bounding quad of the instance in layout coordinates. This is always a rectangle, but unlike the bounding box can represent
rotation.
This returns a copy of the bounding quad. The returned DOMQuad does not
change if the instance changes, nor does changing the DOMQuad affect the
instance.
isVisible
Revision 328 Page 839/1582
A boolean indicating whether the instance is visible in the layout.
opacity
The opacity of the instance, as a floating point number in the range [0, 1], where 0 is
fully transparent and 1 is fully opaque.
colorRgb
An array with 3 elements specifying the red, green and blue color filter of the
instance, with color values as floats in the 0-1 range.
blendMode
A string indicating the current blend mode of the instance, controlling how it draws
over the background. This must be one of "normal" , "additive" ,
"copy" , "destination-over" , "source-in" , "destination-in" ,
"source-out" , "destination-out" , "source-atop" ,
"destination-atop" .
effects
An array of IEffectInstance representing the effect parameters for each effect on the
instance.
moveToTop()
moveToBottom()
Move the instance to the top or the bottom of its current layer in the Z order.
moveToLayer(layer)
Move the instance to the top of a different layer given by its ILayer.
moveAdjacentToInstance(other, isAfter)
Move the instance adjacent to other (another IWorldInstance ) in the Z
order. If necessary this also moves the instance to the same layer as other . If
isAfter is true, it moves it just above the given instance, else just below.
zIndex
A read-only integer indicating the instance's current index in the Z order on its
current layer, starting at 0 for the back of the current layer, and increasing as it
moves to the front.
isCollisionEnabled
Set or get a boolean indicating whether collisions are enabled for this instance. If
Revision 328 Page 840/1582
disabled, the instance will always fail all overlap or collision checks.
containsPoint(x, y)
Test if a point intersects this instance, using its collision polygon if any, and return a
boolean indicating if the point is inside the instance's collision area.
testOverlap(wi)
Test if this instance overlaps another world instance given by an
IWorldInstance , returning true if they overlap, else false . This uses
the object's collision polygons if any. If either instance has collisions disabled, this
will always return false .
testOverlapSolid()
Test if this instance overlaps any instance with the Solid behavior. This returns the
instance interface class for the first instance with the solid behavior that was found
to overlap this instance, or null if none. This uses the object's collision polygons
if any and respects solid collision filtering.
The return value of this method is truthy when an overlap is found and falsey
when not, so this can be used directly in an if statement.
createMesh(hsize, vsize)
Create a mesh for deforming the appearance of the object with the given number of
mesh points horizontally and vertically. The minimum size is 2.
releaseMesh()
Releases any mesh that has been created, reverting back to default rendering of the
object with no mesh distortion. Ignored if no mesh created.
setMeshPoint(col, row, opts)
Alter a given point in a created mesh given by its zero-based column and row.
opts is an object that may specify the following properties:
mode : a string of "absolute" (default) or "relative" , determining how
to interpret the x , y , u and v options.
x and y : the mesh point position offset, in normalized co-ordinates [0, 1]
across the object size. These are allowed to go outside the object bounds. In
relative mode these are added to the mesh point's current position.
u and v : the texture co-ordinate for the mesh point, in normalized coRevision 328 Page 841/1582
ordinates [0, 1]. These are not allowed to go outside the object bounds. These
can be omitted, or in absolute mode be set to -1, to indicate not to change the
texture co-ordinate from the default.
zElevation : the Z elevation of the mesh point, allowing for distortion in 3D.
Similarly to Z elevation of entire objects, this moves the mesh point up and down
on the Z axis.
getMeshSize()
Return the size of the mesh as [hsize, vsize] (corresponding to the size
passed to createMesh() ) if one is created. If no mesh has been created,
returns [0, 0] .
getParent()
Return the parent IWorldInstance of this instance in the scene graph
hierarchy if any, else null .
getTopParent()
Return the top parent of this instance in the scene graph hierarchy (which by
definition has no parent itself) if any, else null .
*parents()
A generator method that can be used to iterate all the instance's parents, up to the
top parent.
getChildCount()
Returns the number of children that have been added to this instance in the scene
graph hierarchy.
getChildAt(index)
Of the children that have been added to this instance, return the child instance at the
given zero-based index. If the index is out of bounds, returns null .
*children()
A generator method that can be used to iterate all the instance's added children.
*allChildren()
A generator method that can be used to iterate all the instance's children recursively,
i.e. including children of children, down to the bottom of the scene graph hierarchy.
addChild(wi, opts)
Add another world instance given by an IWorldInstance as a child of this
Revision 328 Page 842/1582
instance in the scene graph hierarchy. This instance becomes its parent in the
scene graph hierarchy. The child will move, scale and rotate with this instance
according to the provided options specified in the object opts , which supports the
following properties:
transformX : move the child with this instance's X position
transformY : move the child with this instance's Y position
transformWidth : scale the child with this instance's width
transformHeight : scale the child with this instance's height
transformAngle : rotate the child with this instance's angle
transformZElevation : move the child with this instance's Z elevation
transformOpacity : change the child's opacity according to the parent's
opacity
transformVisibility : make the child invisible if the parent is also invisible
destroyWithParent : automatically destroy the child if this instance is
destroyed
Each option is a boolean which defaults to false if omitted, so only true
properties need to be specified.
Instances can only have one parent. If the given instance is already added as
a child of something else, this method will have no effect.
removeChild(wi)
Remove an existing child given by an IWorldInstance that was previously
added with addChild() . The child is detached from the scene graph hierarchy
and this instance will no longer act as its parent. The removed child still keeps its
own children, if it has any.
removeFromParent()
Shorthand method for wi.getParent().removeChild(wi) , i.e. removes this
instance from its parent if it has any. If the instance has no parent, the method has
no effect.
Revision 328 Page 843/1582
View online: https://www.construct.net/en/make-games/manuals/construct-3/scripting/scriptingreference/interfaces/behavior-instance-event
Events fired on IBehaviorInstance (or its derivatives) pass an event object as a
parameter to the handler function, and this event object has the following standard
properties. Each type of event may add other properties - refer to the documentation for
each event to identify any further properties that are available.
instance
A reference to the IInstance (or derivative) associated with the behavior instance
which fired the event.
behaviorInstance
A reference to the IBehaviorInstance which fired the event.
Revision 328 
